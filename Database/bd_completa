-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.areas
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    name text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    CONSTRAINT areas_pkey PRIMARY KEY (id),
    CONSTRAINT areas_name_key UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.cash_sessions
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    shift_id uuid,
    user_id uuid,
    opened_at timestamp with time zone NOT NULL DEFAULT now(),
    closed_at timestamp with time zone,
    opening_amount numeric(12, 2) NOT NULL DEFAULT 0,
    closing_amount numeric(12, 2),
    notes text COLLATE pg_catalog."default",
    CONSTRAINT cash_sessions_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.categories
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    name text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    CONSTRAINT categories_pkey PRIMARY KEY (id),
    CONSTRAINT categories_name_key UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.customers
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    name text COLLATE pg_catalog."default" NOT NULL,
    phone text COLLATE pg_catalog."default",
    email text COLLATE pg_catalog."default",
    CONSTRAINT customers_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.ingredients
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    name text COLLATE pg_catalog."default" NOT NULL,
    unit text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT ingredients_pkey PRIMARY KEY (id),
    CONSTRAINT ingredients_name_key UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.modifiers
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    name text COLLATE pg_catalog."default" NOT NULL,
    price_delta numeric(12, 2) NOT NULL DEFAULT 0,
    CONSTRAINT modifiers_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.order_item_modifiers
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    order_item_id uuid NOT NULL,
    modifier_id uuid NOT NULL,
    price_delta numeric(12, 2) NOT NULL DEFAULT 0,
    CONSTRAINT order_item_modifiers_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.order_items
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    order_id uuid NOT NULL,
    product_id uuid NOT NULL,
    qty numeric(12, 3) NOT NULL,
    unit_price numeric(12, 2) NOT NULL,
    line_total numeric(12, 2) GENERATED ALWAYS AS ((qty * unit_price)) STORED,
    notes text COLLATE pg_catalog."default",
    CONSTRAINT order_items_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.order_status_history
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    order_id uuid NOT NULL,
    status order_status NOT NULL,
    changed_at timestamp with time zone NOT NULL DEFAULT now(),
    changed_by uuid,
    CONSTRAINT order_status_history_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.orders
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    table_id uuid,
    customer_id uuid,
    status order_status NOT NULL DEFAULT 'NEW'::order_status,
    subtotal numeric(12, 2) NOT NULL DEFAULT 0,
    tax numeric(12, 2) NOT NULL DEFAULT 0,
    service_fee numeric(12, 2) NOT NULL DEFAULT 0,
    total numeric(12, 2) NOT NULL DEFAULT 0,
    opened_at timestamp with time zone DEFAULT now(),
    closed_at timestamp with time zone,
    kind text COLLATE pg_catalog."default" NOT NULL DEFAULT 'REGULAR'::text,
    inventory_consumed_at timestamp with time zone,
    CONSTRAINT orders_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.payment_allocations
(
    payment_id uuid NOT NULL,
    order_id uuid NOT NULL,
    applied_amount numeric(12, 2) NOT NULL,
    CONSTRAINT payment_allocations_pkey PRIMARY KEY (payment_id, order_id)
);

CREATE TABLE IF NOT EXISTS public.payments
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    method payment_method NOT NULL,
    amount numeric(12, 2) NOT NULL,
    tip numeric(12, 2) NOT NULL DEFAULT 0,
    received_at timestamp with time zone NOT NULL DEFAULT now(),
    cash_session_id uuid,
    ref text COLLATE pg_catalog."default",
    CONSTRAINT payments_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.product_modifiers
(
    product_id uuid NOT NULL,
    modifier_id uuid NOT NULL,
    CONSTRAINT product_modifiers_pkey PRIMARY KEY (product_id, modifier_id)
);

CREATE TABLE IF NOT EXISTS public.product_prices
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    product_id uuid NOT NULL,
    label text COLLATE pg_catalog."default" NOT NULL,
    price numeric(12, 2) NOT NULL,
    starts_at timestamp with time zone,
    ends_at timestamp with time zone,
    CONSTRAINT product_prices_pkey PRIMARY KEY (id),
    CONSTRAINT product_prices_product_id_label_key UNIQUE (product_id, label)
);

CREATE TABLE IF NOT EXISTS public.products
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    category_id uuid,
    name text COLLATE pg_catalog."default" NOT NULL,
    sku text COLLATE pg_catalog."default",
    is_active boolean NOT NULL DEFAULT true,
    default_price numeric(12, 2) NOT NULL,
    tax_rate numeric(5, 2) NOT NULL DEFAULT 0,
    print_station text COLLATE pg_catalog."default",
    created_at timestamp with time zone DEFAULT now(),
    CONSTRAINT products_pkey PRIMARY KEY (id),
    CONSTRAINT products_sku_key UNIQUE (sku)
);

CREATE TABLE IF NOT EXISTS public.purchase_items
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    purchase_id uuid,
    ingredient_id uuid,
    qty numeric(14, 4) NOT NULL,
    unit_cost numeric(12, 4) NOT NULL,
    line_total numeric(12, 2) GENERATED ALWAYS AS ((qty * unit_cost)) STORED,
    CONSTRAINT purchase_items_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.purchase_orders
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    supplier_id uuid,
    warehouse_id uuid,
    status text COLLATE pg_catalog."default" NOT NULL DEFAULT 'OPEN'::text,
    total numeric(12, 2) NOT NULL DEFAULT 0,
    created_at timestamp with time zone DEFAULT now(),
    CONSTRAINT purchase_orders_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.recipe_items
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    recipe_id uuid NOT NULL,
    ingredient_id uuid NOT NULL,
    qty numeric(14, 4) NOT NULL,
    CONSTRAINT recipe_items_pkey PRIMARY KEY (id),
    CONSTRAINT recipe_items_recipe_id_ingredient_id_key UNIQUE (recipe_id, ingredient_id)
);

CREATE TABLE IF NOT EXISTS public.recipes
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    product_id uuid NOT NULL,
    yield_qty numeric(14, 4) NOT NULL DEFAULT 1,
    CONSTRAINT recipes_pkey PRIMARY KEY (id),
    CONSTRAINT recipes_product_id_key UNIQUE (product_id)
);

CREATE TABLE IF NOT EXISTS public.reservation_tables
(
    reservation_id uuid NOT NULL,
    table_id uuid NOT NULL,
    CONSTRAINT reservation_tables_pkey PRIMARY KEY (reservation_id, table_id)
);

CREATE TABLE IF NOT EXISTS public.reservations
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    customer_id uuid,
    starts_at timestamp with time zone NOT NULL,
    ends_at timestamp with time zone NOT NULL,
    people integer NOT NULL,
    status text COLLATE pg_catalog."default" NOT NULL DEFAULT 'BOOKED'::text,
    CONSTRAINT reservations_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.restaurant_tables
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    area_id uuid NOT NULL,
    code text COLLATE pg_catalog."default" NOT NULL,
    seats integer NOT NULL,
    is_active boolean NOT NULL DEFAULT true,
    created_at timestamp with time zone DEFAULT now(),
    CONSTRAINT restaurant_tables_pkey PRIMARY KEY (id),
    CONSTRAINT restaurant_tables_area_id_code_key UNIQUE (area_id, code)
);

CREATE TABLE IF NOT EXISTS public.shifts
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    name text COLLATE pg_catalog."default" NOT NULL,
    starts_at timestamp with time zone NOT NULL,
    ends_at timestamp with time zone,
    created_by uuid,
    created_at timestamp with time zone DEFAULT now(),
    CONSTRAINT shifts_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.stock_items
(
    warehouse_id uuid NOT NULL,
    ingredient_id uuid NOT NULL,
    qty numeric(14, 4) NOT NULL DEFAULT 0,
    CONSTRAINT stock_items_pkey PRIMARY KEY (warehouse_id, ingredient_id)
);

CREATE TABLE IF NOT EXISTS public.stock_moves
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    warehouse_id uuid NOT NULL,
    ingredient_id uuid NOT NULL,
    move move_type NOT NULL,
    qty numeric(14, 4) NOT NULL,
    reason text COLLATE pg_catalog."default",
    ref_table text COLLATE pg_catalog."default",
    ref_id uuid,
    created_at timestamp with time zone DEFAULT now(),
    CONSTRAINT stock_moves_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.suppliers
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    name text COLLATE pg_catalog."default" NOT NULL,
    email text COLLATE pg_catalog."default",
    phone text COLLATE pg_catalog."default",
    CONSTRAINT suppliers_pkey PRIMARY KEY (id),
    CONSTRAINT suppliers_name_key UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.users
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    name text COLLATE pg_catalog."default" NOT NULL,
    email text COLLATE pg_catalog."default",
    password_hash text COLLATE pg_catalog."default" NOT NULL,
    is_admin boolean NOT NULL DEFAULT false,
    created_at timestamp with time zone DEFAULT now(),
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT users_email_key UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS public.warehouses
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    name text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT warehouses_pkey PRIMARY KEY (id),
    CONSTRAINT warehouses_name_key UNIQUE (name)
);

ALTER TABLE IF EXISTS public.cash_sessions
    ADD CONSTRAINT cash_sessions_shift_id_fkey FOREIGN KEY (shift_id)
    REFERENCES public.shifts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.order_item_modifiers
    ADD CONSTRAINT order_item_modifiers_modifier_id_fkey FOREIGN KEY (modifier_id)
    REFERENCES public.modifiers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.order_item_modifiers
    ADD CONSTRAINT order_item_modifiers_order_item_id_fkey FOREIGN KEY (order_item_id)
    REFERENCES public.order_items (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.order_items
    ADD CONSTRAINT order_items_order_id_fkey FOREIGN KEY (order_id)
    REFERENCES public.orders (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.order_items
    ADD CONSTRAINT order_items_product_id_fkey FOREIGN KEY (product_id)
    REFERENCES public.products (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.order_status_history
    ADD CONSTRAINT order_status_history_order_id_fkey FOREIGN KEY (order_id)
    REFERENCES public.orders (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.orders
    ADD CONSTRAINT orders_customer_id_fkey FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.orders
    ADD CONSTRAINT orders_table_id_fkey FOREIGN KEY (table_id)
    REFERENCES public.restaurant_tables (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_orders_table_open
    ON public.orders(table_id);


ALTER TABLE IF EXISTS public.payment_allocations
    ADD CONSTRAINT payment_allocations_order_id_fkey FOREIGN KEY (order_id)
    REFERENCES public.orders (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.payment_allocations
    ADD CONSTRAINT payment_allocations_payment_id_fkey FOREIGN KEY (payment_id)
    REFERENCES public.payments (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.payments
    ADD CONSTRAINT payments_cash_session_id_fkey FOREIGN KEY (cash_session_id)
    REFERENCES public.cash_sessions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.product_modifiers
    ADD CONSTRAINT product_modifiers_modifier_id_fkey FOREIGN KEY (modifier_id)
    REFERENCES public.modifiers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.product_modifiers
    ADD CONSTRAINT product_modifiers_product_id_fkey FOREIGN KEY (product_id)
    REFERENCES public.products (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.product_prices
    ADD CONSTRAINT product_prices_product_id_fkey FOREIGN KEY (product_id)
    REFERENCES public.products (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.products
    ADD CONSTRAINT products_category_id_fkey FOREIGN KEY (category_id)
    REFERENCES public.categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.purchase_items
    ADD CONSTRAINT purchase_items_ingredient_id_fkey FOREIGN KEY (ingredient_id)
    REFERENCES public.ingredients (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.purchase_items
    ADD CONSTRAINT purchase_items_purchase_id_fkey FOREIGN KEY (purchase_id)
    REFERENCES public.purchase_orders (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.purchase_orders
    ADD CONSTRAINT purchase_orders_supplier_id_fkey FOREIGN KEY (supplier_id)
    REFERENCES public.suppliers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.purchase_orders
    ADD CONSTRAINT purchase_orders_warehouse_id_fkey FOREIGN KEY (warehouse_id)
    REFERENCES public.warehouses (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.recipe_items
    ADD CONSTRAINT recipe_items_ingredient_id_fkey FOREIGN KEY (ingredient_id)
    REFERENCES public.ingredients (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.recipe_items
    ADD CONSTRAINT recipe_items_recipe_id_fkey FOREIGN KEY (recipe_id)
    REFERENCES public.recipes (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.recipes
    ADD CONSTRAINT recipes_product_id_fkey FOREIGN KEY (product_id)
    REFERENCES public.products (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS recipes_product_id_key
    ON public.recipes(product_id);


ALTER TABLE IF EXISTS public.reservation_tables
    ADD CONSTRAINT reservation_tables_reservation_id_fkey FOREIGN KEY (reservation_id)
    REFERENCES public.reservations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.reservation_tables
    ADD CONSTRAINT reservation_tables_table_id_fkey FOREIGN KEY (table_id)
    REFERENCES public.restaurant_tables (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.reservations
    ADD CONSTRAINT reservations_customer_id_fkey FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.restaurant_tables
    ADD CONSTRAINT restaurant_tables_area_id_fkey FOREIGN KEY (area_id)
    REFERENCES public.areas (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.stock_items
    ADD CONSTRAINT stock_items_ingredient_id_fkey FOREIGN KEY (ingredient_id)
    REFERENCES public.ingredients (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.stock_items
    ADD CONSTRAINT stock_items_warehouse_id_fkey FOREIGN KEY (warehouse_id)
    REFERENCES public.warehouses (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.stock_moves
    ADD CONSTRAINT stock_moves_ingredient_id_fkey FOREIGN KEY (ingredient_id)
    REFERENCES public.ingredients (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.stock_moves
    ADD CONSTRAINT stock_moves_warehouse_id_fkey FOREIGN KEY (warehouse_id)
    REFERENCES public.warehouses (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;